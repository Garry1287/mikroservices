{

cat > ca-config.json <<EOF
{
  "signing": {
    "default": {
      "expiry": "8760h"
    },
    "profiles": {
      "kubernetes": {
        "usages": ["signing", "key encipherment", "server auth", "client auth"],
        "expiry": "8760h"
      }
    }
  }
}
EOF

cat > ca-csr.json <<EOF
{
  "CN": "Kubernetes",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "RU",
      "L": "LIPETSK",
      "O": "Kubernetes",
      "OU": "CA",
      "ST": "48RU"
    }
  ]
}
EOF

cfssl gencert -initca ca-csr.json | cfssljson -bare ca

}







{

cat > admin-csr.json <<EOF
{
  "CN": "admin",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "RU",
      "L": "LIPETSK",
      "O": "system:masters",
      "OU": "Kubernetes The Hard Way",
      "ST": "48RU"
    }
  ]
}
EOF

cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca-config.json \
  -profile=kubernetes \
  admin-csr.json | cfssljson -bare admin

}





for instance in worker-0 worker-1 worker-2; do
cat > ${instance}-csr.json <<EOF
{
  "CN": "system:node:${instance}",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "RU",
      "L": "LIPETSK",
      "O": "system:nodes",
      "OU": "Kubernetes The Hard Way",
      "ST": "48RU"
    }
  ]
}
EOF

EXTERNAL_IP=$(gcloud compute instances describe ${instance} \
  --format 'value(networkInterfaces[0].accessConfigs[0].natIP)')

INTERNAL_IP=$(gcloud compute instances describe ${instance} \
  --format 'value(networkInterfaces[0].networkIP)')

cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca-config.json \
  -hostname=${instance},${EXTERNAL_IP},${INTERNAL_IP} \
  -profile=kubernetes \
  ${instance}-csr.json | cfssljson -bare ${instance}
done




{

cat > kube-controller-manager-csr.json <<EOF
{
  "CN": "system:kube-controller-manager",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "RU",
      "L": "LIPETSK",
      "O": "system:kube-controller-manager",
      "OU": "Kubernetes The Hard Way",
      "ST": "48RU"
    }
  ]
}
EOF

cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca-config.json \
  -profile=kubernetes \
  kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager

}






{

cat > kube-proxy-csr.json <<EOF
{
  "CN": "system:kube-proxy",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "RU",
      "L": "LIPETSK",
      "O": "system:node-proxier",
      "OU": "Kubernetes The Hard Way",
      "ST": "48RU"
    }
  ]
}
EOF

cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca-config.json \
  -profile=kubernetes \
  kube-proxy-csr.json | cfssljson -bare kube-proxy

}










{

cat > kube-scheduler-csr.json <<EOF
{
  "CN": "system:kube-scheduler",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "RU",
      "L": "LIPETSK",
      "O": "system:kube-scheduler",
      "OU": "Kubernetes The Hard Way",
      "ST": "48RU"
    }
  ]
}
EOF

cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca-config.json \
  -profile=kubernetes \
  kube-scheduler-csr.json | cfssljson -bare kube-scheduler

}





{

KUBERNETES_PUBLIC_ADDRESS=$(gcloud compute addresses describe kubernetes-the-hard-way \
  --region $(gcloud config get-value compute/region) \
  --format 'value(address)')

KUBERNETES_HOSTNAMES=kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster,kubernetes.svc.cluster.local

cat > kubernetes-csr.json <<EOF
{
  "CN": "kubernetes",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "RU",
      "L": "LIPETSK",
      "O": "Kubernetes",
      "OU": "Kubernetes The Hard Way",
      "ST": "48RU"
    }
  ]
}
EOF

cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca-config.json \
  -hostname=10.32.0.1,10.240.0.10,10.240.0.11,10.240.0.12,${KUBERNETES_PUBLIC_ADDRESS},127.0.0.1,${KUBERNETES_HOSTNAMES} \
  -profile=kubernetes \
  kubernetes-csr.json | cfssljson -bare kubernetes

}



{

cat > service-account-csr.json <<EOF
{
  "CN": "service-accounts",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "RU",
      "L": "LIPETSK",
      "O": "Kubernetes",
      "OU": "Kubernetes The Hard Way",
      "ST": "48RU"
    }
  ]
}
EOF

cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca-config.json \
  -profile=kubernetes \
  service-account-csr.json | cfssljson -bare service-account

}











garry@g-notebook:~/kub-certs$ for instance in worker-0 worker-1 worker-2; do
>   gcloud compute scp ca.pem ${instance}-key.pem ${instance}.pem ${instance}:~/
> done
Warning: Permanently added 'compute.3766830442662676472' (ECDSA) to the list of known hosts.
Enter passphrase for key '/home/garry/.ssh/google_compute_engine': 
ca.pem                                                                                                                      100% 1310     6.3KB/s   00:00    
worker-0-key.pem                                                                                                            100% 1675     8.0KB/s   00:00    
worker-0.pem                                                                                                                100% 1484     7.1KB/s   00:00    
Warning: Permanently added 'compute.8698377600634537972' (ECDSA) to the list of known hosts.
Enter passphrase for key '/home/garry/.ssh/google_compute_engine': 
ca.pem                                                                                                                      100% 1310     6.2KB/s   00:00    
worker-1-key.pem                                                                                                            100% 1675     8.0KB/s   00:00    
worker-1.pem                                                                                                                100% 1484     7.1KB/s   00:00    
Warning: Permanently added 'compute.1888991614668982257' (ECDSA) to the list of known hosts.
Enter passphrase for key '/home/garry/.ssh/google_compute_engine': 
ca.pem                                                                                                                      100% 1310    14.7KB/s   00:00    
worker-2-key.pem                                                                                                            100% 1679     8.0KB/s   00:00    
worker-2.pem                                                                                                                100% 1484     7.1KB/s   00:00    
garry@g-notebook:~/kub-certs$ for instance in controller-0 controller-1 controller-2; do
>   gcloud compute scp ca.pem ca-key.pem kubernetes-key.pem kubernetes.pem \
>     service-account-key.pem service-account.pem ${instance}:~/
> done
Enter passphrase for key '/home/garry/.ssh/google_compute_engine': 
ca.pem                                                                                                                      100% 1310     6.3KB/s   00:00    
ca-key.pem                                                                                                                  100% 1679     8.0KB/s   00:00    
kubernetes-key.pem                                                                                                          100% 1679     8.0KB/s   00:00    
kubernetes.pem                                                                                                              100% 1655     7.9KB/s   00:00    
service-account-key.pem                                                                                                     100% 1679     8.0KB/s   00:00    
service-account.pem                                                                                                         100% 1432     6.8KB/s   00:00    
Warning: Permanently added 'compute.8146356560865085495' (ECDSA) to the list of known hosts.
Enter passphrase for key '/home/garry/.ssh/google_compute_engine': 
ca.pem                                                                                                                      100% 1310     6.3KB/s   00:00    
ca-key.pem                                                                                                                  100% 1679    17.7KB/s   00:00    
kubernetes-key.pem                                                                                                          100% 1679     8.0KB/s   00:00    
kubernetes.pem                                                                                                              100% 1655     7.9KB/s   00:00    
service-account-key.pem                                                                                                     100% 1679     8.0KB/s   00:00    
service-account.pem                                                                                                         100% 1432     6.8KB/s   00:00    
Warning: Permanently added 'compute.8795793081020008499' (ECDSA) to the list of known hosts.
Enter passphrase for key '/home/garry/.ssh/google_compute_engine': 
ca.pem                                                                                                                      100% 1310     6.2KB/s   00:00    
ca-key.pem                                                                                                                  100% 1679     8.0KB/s   00:00    
kubernetes-key.pem                                                                                                          100% 1679     8.0KB/s   00:00    
kubernetes.pem                                                                                                              100% 1655     7.9KB/s   00:00    
service-account-key.pem                                                                                                     100% 1679     8.0KB/s   00:00    
service-account.pem     



-----------------------------------
tmux
Now type the following sequence:
ctrl + b :
setw synchronize-panes on

Add this line to your ~/.tmux.conf

bind = set -g synchronize-panes

So, now instead of typing (the escape sequence is Ctrl-b by default)

Ctrl-b :setw synchronize panes

to toggle synchronize panes on and off, you can simply

Ctrl-b =

https://gist.github.com/MohamedAlaa/2961058

https://habr.com/ru/post/126996/
--------------------------------------


garry@controller-1:~$ sudo ETCDCTL_API=3 etcdctl member list \
>   --endpoints=https://127.0.0.1:2379 \
>   --cacert=/etc/etcd/ca.pem \
>   --cert=/etc/etcd/kubernetes.pem \
>   --key=/etc/etcd/kubernetes-key.pem
3a57933972cb5131, started, controller-2, https://10.240.0.12:2380, https://10.240.0.12:2379, false
f98dc20bce6225a0, started, controller-0, https://10.240.0.10:2380, https://10.240.0.10:2379, false
ffed16798470cab5, started, controller-1, https://10.240.0.11:2380, https://10.240.0.11:2379, false




garry@g-notebook:~/kub-hard-way/kub-certs$ curl --cacert ca.pem https://${KUBERNETES_PUBLIC_ADDRESS}:6443/version
{
  "major": "1",
  "minor": "15",
  "gitVersion": "v1.15.3",
  "gitCommit": "2d3c76f9091b6bec110a5e63777c332469e0cba2",
  "gitTreeState": "clean",
  "buildDate": "2019-08-19T11:05:50Z",
  "goVersion": "go1.12.9",
  "compiler": "gc",




garry@g-notebook:~/kub-hard-way/kub-certs$ {
>   KUBERNETES_PUBLIC_ADDRESS=$(gcloud compute addresses describe kubernetes-the-hard-way \
>     --region $(gcloud config get-value compute/region) \
>     --format 'value(address)')
> 
>   kubectl config set-cluster kubernetes-the-hard-way \
>     --certificate-authority=ca.pem \
>     --embed-certs=true \
>     --server=https://${KUBERNETES_PUBLIC_ADDRESS}:6443
> 
>   kubectl config set-credentials admin \
>     --client-certificate=admin.pem \
>     --client-key=admin-key.pem
> 
>   kubectl config set-context kubernetes-the-hard-way \
>     --cluster=kubernetes-the-hard-way \
>     --user=admin
> 
>   kubectl config use-context kubernetes-the-hard-way
> }
Cluster "kubernetes-the-hard-way" set.
User "admin" set.
Context "kubernetes-the-hard-way" created.
Switched to context "kubernetes-the-hard-way".
garry@g-notebook:~/kub-hard-way/kub-certs$ kubectl get componentstatuses
NAME                 STATUS    MESSAGE             ERROR
controller-manager   Healthy   ok                  
scheduler            Healthy   ok                  
etcd-1               Healthy   {"health":"true"}   
etcd-0               Healthy   {"health":"true"}   
etcd-2               Healthy   {"health":"true"}   
garry@g-notebook:~/kub-hard-way/kub-certs$ kubectl get nodes
NAME       STATUS   ROLES    AGE     VERSION
worker-0   Ready    <none>   3m59s   v1.15.3
worker-1   Ready    <none>   3m59s   v1.15.3
worker-2   Ready    <none>   3m59s   v1.15.3
garry@g-notebook:~/kub-hard-way/kub-certs$ for instance in worker-0 worker-1 worker-2; do
>   gcloud compute instances describe ${instance} \
>     --format 'value[separator=" "](networkInterfaces[0].networkIP,metadata.items[0].value)'
> done
10.240.0.20 10.200.0.0/24
10.240.0.21 10.200.1.0/24
10.240.0.22 10.200.2.0/24
garry@g-notebook:~/kub-hard-way/kub-certs$ for i in 0 1 2; do
>   gcloud compute routes create kubernetes-route-10-200-${i}-0-24 \
>     --network kubernetes-the-hard-way \
>     --next-hop-address 10.240.0.2${i} \
>     --destination-range 10.200.${i}.0/24
> done

Created [https://www.googleapis.com/compute/v1/projects/docker-257312/global/routes/kubernetes-route-10-200-0-0-24].
NAME                            NETWORK                  DEST_RANGE     NEXT_HOP     PRIORITY
kubernetes-route-10-200-0-0-24  kubernetes-the-hard-way  10.200.0.0/24  10.240.0.20  1000
Created [https://www.googleapis.com/compute/v1/projects/docker-257312/global/routes/kubernetes-route-10-200-1-0-24].
NAME                            NETWORK                  DEST_RANGE     NEXT_HOP     PRIORITY
kubernetes-route-10-200-1-0-24  kubernetes-the-hard-way  10.200.1.0/24  10.240.0.21  1000
Created [https://www.googleapis.com/compute/v1/projects/docker-257312/global/routes/kubernetes-route-10-200-2-0-24].
NAME                            NETWORK                  DEST_RANGE     NEXT_HOP     PRIORITY
kubernetes-route-10-200-2-0-24  kubernetes-the-hard-way  10.200.2.0/24  10.240.0.22  1000
garry@g-notebook:~/kub-hard-way/kub-certs$ 
garry@g-notebook:~/kub-hard-way/kub-certs$ gcloud compute routes list --filter "network: kubernetes-the-hard-way"
NAME                            NETWORK                  DEST_RANGE     NEXT_HOP                  PRIORITY
default-route-9cd7e370e90fb94e  kubernetes-the-hard-way  10.240.0.0/24  kubernetes-the-hard-way   1000
default-route-c5401a595d65395b  kubernetes-the-hard-way  0.0.0.0/0      default-internet-gateway  1000
kubernetes-route-10-200-0-0-24  kubernetes-the-hard-way  10.200.0.0/24  10.240.0.20               1000
kubernetes-route-10-200-1-0-24  kubernetes-the-hard-way  10.200.1.0/24  10.240.0.21               1000
kubernetes-route-10-200-2-0-24  kubernetes-the-hard-way  10.200.2.0/24  10.240.0.22               1000
garry@g-notebook:~/kub-hard-way/kub-certs$ kubectl apply -f https://storage.googleapis.com/kubernetes-the-hard-way/coredns.yaml
serviceaccount/coredns created
clusterrole.rbac.authorization.k8s.io/system:coredns created
clusterrolebinding.rbac.authorization.k8s.io/system:coredns created
configmap/coredns created
deployment.apps/coredns created
service/kube-dns created
garry@g-notebook:~/kub-hard-way/kub-certs$ kubectl get pods -l k8s-app=kube-dns -n kube-system
NAME                     READY   STATUS    RESTARTS   AGE
coredns-5fb99965-bfvdr   0/1     Running   0          9s
coredns-5fb99965-tc4bw   0/1     Running   0          9s



garry@g-notebook:~/kub-hard-way/kub-certs$ kubectl apply -f https://storage.googleapis.com/kubernetes-the-hard-way/coredns.yaml
serviceaccount/coredns created
clusterrole.rbac.authorization.k8s.io/system:coredns created
clusterrolebinding.rbac.authorization.k8s.io/system:coredns created
configmap/coredns created
deployment.apps/coredns created
service/kube-dns created
garry@g-notebook:~/kub-hard-way/kub-certs$ kubectl get pods -l k8s-app=kube-dns -n kube-system
NAME                     READY   STATUS    RESTARTS   AGE
coredns-5fb99965-bfvdr   0/1     Running   0          9s
coredns-5fb99965-tc4bw   0/1     Running   0          9s
garry@g-notebook:~/kub-hard-way/kub-certs$ kubectl run --generator=run-pod/v1 busybox --image=busybox:1.28 --command -- sleep 3600
pod/busybox created
garry@g-notebook:~/kub-hard-way/kub-certs$ kubectl get pods -l run=busybox
NAME      READY   STATUS    RESTARTS   AGE
busybox   1/1     Running   0          15s
garry@g-notebook:~/kub-hard-way/kub-certs$ POD_NAME=$(kubectl get pods -l run=busybox -o jsonpath="{.items[0].metadata.name}")
garry@g-notebook:~/kub-hard-way/kub-certs$ kubectl exec -ti $POD_NAME -- nslookup kubernetes
Server:    10.32.0.10
Address 1: 10.32.0.10 kube-dns.kube-system.svc.cluster.local

Name:      kubernetes
Address 1: 10.32.0.1 kubernetes.default.svc.cluster.local
garry@g-notebook:~/kub-hard-way/kub-certs$ 



-------------------------------------
garry@g-notebook:~/kub-hard-way/kub-certs$ kubectl create secret generic kubernetes-the-hard-way \
>   --from-literal="mykey=mydata"
secret/kubernetes-the-hard-way created
garry@g-notebook:~/kub-hard-way/kub-certs$ gcloud compute ssh controller-0 \
>   --command "sudo ETCDCTL_API=3 etcdctl get \
>   --endpoints=https://127.0.0.1:2379 \
>   --cacert=/etc/etcd/ca.pem \
>   --cert=/etc/etcd/kubernetes.pem \
>   --key=/etc/etcd/kubernetes-key.pem\
>   /registry/secrets/default/kubernetes-the-hard-way | hexdump -C"

Enter passphrase for key '/home/garry/.ssh/google_compute_engine': 
00000000  2f 72 65 67 69 73 74 72  79 2f 73 65 63 72 65 74  |/registry/secret|
00000010  73 2f 64 65 66 61 75 6c  74 2f 6b 75 62 65 72 6e  |s/default/kubern|
00000020  65 74 65 73 2d 74 68 65  2d 68 61 72 64 2d 77 61  |etes-the-hard-wa|
00000030  79 0a 6b 38 73 3a 65 6e  63 3a 61 65 73 63 62 63  |y.k8s:enc:aescbc|
00000040  3a 76 31 3a 6b 65 79 31  3a a7 19 5f 81 78 59 4e  |:v1:key1:.._.xYN|
00000050  fe 1f 98 1d 07 6c 63 6f  89 7c 32 0a be 86 b1 84  |.....lco.|2.....|
00000060  c6 0c d9 0c ea 54 c7 50  00 d0 7a fa 44 45 29 21  |.....T.P..z.DE)!|
00000070  7b ac 8f 34 7d 7a 90 bf  21 b0 92 3a 24 63 14 39  |{..4}z..!..:$c.9|
00000080  3b 7d 4d 71 a5 11 03 a8  63 d9 a6 0b c7 c1 4f 15  |;}Mq....c.....O.|
00000090  d7 69 45 78 74 33 48 cc  2c 56 11 5f 63 56 68 dd  |.iExt3H.,V._cVh.|
000000a0  1b a2 6f b8 17 c8 d7 2d  e8 f3 39 8a 68 02 95 39  |..o....-..9.h..9|
000000b0  09 bd df 20 94 26 28 2e  f0 03 30 74 23 2e 86 fa  |... .&(...0t#...|
000000c0  15 01 a3 38 00 6b c9 ec  6d 75 a5 dd 6c 2f 92 d7  |...8.k..mu..l/..|
000000d0  e7 94 e8 0c e4 76 a7 c1  ae 24 1c fc f8 fa 5a ee  |.....v...$....Z.|
000000e0  e2 f7 23 00 de d1 9a 1a  7a 0a                    |..#.....z.|



garry@g-notebook:~/kub-hard-way/kub-certs$ kubectl create deployment nginx --image=nginx
deployment.apps/nginx created
garry@g-notebook:~/kub-hard-way/kub-certs$ kubectl get pods -l app=nginx
NAME                     READY   STATUS              RESTARTS   AGE
nginx-554b9c67f9-7v7sk   0/1     ContainerCreating   0          7s
garry@g-notebook:~/kub-hard-way/kub-certs$ POD_NAME=$(kubectl get pods -l app=nginx -o jsonpath="{.items[0].metadata.name}")
garry@g-notebook:~/kub-hard-way/kub-certs$ kubectl port-forward $POD_NAME 8080:80
Forwarding from 127.0.0.1:8080 -> 80
Forwarding from [::1]:8080 -> 80
Handling connection for 8080
^Cgarry@g-notebook:~/kub-hard-way/kub-certs$ kubectl logs $POD_NAME
127.0.0.1 - - [26/Apr/2020:08:54:17 +0000] "HEAD / HTTP/1.1" 200 0 "-" "curl/7.58.0" "-"
garry@g-notebook:~/kub-hard-way/kub-certs$ kubectl exec -ti $POD_NAME -- nginx -v
nginx version: nginx/1.17.10
garry@g-notebook:~/kub-hard-way/kub-certs$ kubectl expose deployment nginx --port 80 --type NodePort
service/nginx exposed
garry@g-notebook:~/kub-hard-way/kub-certs$ NODE_PORT=$(kubectl get svc nginx \
>   --output=jsonpath='{range .spec.ports[0]}{.nodePort}')

garry@g-notebook:~/kub-hard-way/kub-certs$ 
garry@g-notebook:~/kub-hard-way/kub-certs$ gcloud compute firewall-rules create kubernetes-the-hard-way-allow-nginx-service \
>   --allow=tcp:${NODE_PORT} \
>   --network kubernetes-the-hard-way
Creating firewall...⠹Created [https://www.googleapis.com/compute/v1/projects/docker-257312/global/firewalls/kubernetes-the-hard-way-allow-nginx-service].    
Creating firewall...done.                                                                                                                                    
NAME                                         NETWORK                  DIRECTION  PRIORITY  ALLOW      DENY  DISABLED
kubernetes-the-hard-way-allow-nginx-service  kubernetes-the-hard-way  INGRESS    1000      tcp:32128        False
garry@g-notebook:~/kub-hard-way/kub-certs$ EXTERNAL_IP=$(gcloud compute instances describe worker-0 \
>   --format 'value(networkInterfaces[0].accessConfigs[0].natIP)')
garry@g-notebook:~/kub-hard-way/kub-certs$ curl -I http://${EXTERNAL_IP}:${NODE_PORT}
HTTP/1.1 200 OK
Server: nginx/1.17.10
Date: Sun, 26 Apr 2020 08:59:06 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Tue, 14 Apr 2020 14:19:26 GMT
Connection: keep-alive
ETag: "5e95c66e-264"
Accept-Ranges: bytes

garry@g-notebook:~/kub-hard-way/kub-certs$ echo$EXTERNAL_IP
echo35.205.156.207: команда не найдена
garry@g-notebook:~/kub-hard-way/kub-certs$ echo $EXTERNAL_IP
35.205.156.207
garry@g-notebook:~/kub-hard-way/kub-certs$ echo $NODE_PORT
32128
garry@g-notebook:~/kub-hard-way/kub-certs$ 




В браузере работает
http://35.205.156.207:32128/